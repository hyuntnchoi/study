source : https://www.solutelabs.com/blog/client-side-vs-server-side-rendering-what-to-choose-when

Client-side Vs. Server-side Rendering: 

예전에는 서버 사이드에서 HTML 콘텐츠를 브라우저로 보냈고, 브라우저에서 렌더링을했다.
그러다가 자바스크립트 프레임워크의 도래로, 웹 개발에 완전히 다른 접근이 시작되었따. 서버 쪽의 부담을 덜기 시작한 것이다.

자바스크립트 프레임워크의 힘으로, 브라우저에서 바로 동적 콘텐츠의 렌더링이 가능하게 된 것이다. 이런 경우, 서버는 단지 필요한 base HTML wrapper만 제공한다. 이로 인해 웹 페이지 로딩 시간이 거의 들지 않고 방문자는 부드러운 UX를 경험할 수 있게 되었다.

>> 서버 사이드 렌더링이란 무엇인가?
동적 콘텐츠 렌더링의 전통적 방법으로, 다음 단계를 따른다:
	1. 사용자가 웹사이트에 요청을 보냄
	2. 서버가 자원을 확인하고 컴파일 한 후에 HTML 콘텐츠를 준비한다
	3. 컴파일된 HTML은 사용자의 브라우저로렌더링과 display를 위해  전달된다.
	4. 브라우저가 HTML을 다운로드 받고 사이트가 사용자에게 보여지도록 한다.
	5. 그런 다음 브라우저는 JavaScript를 다운로드 받고 이 JS파일을 실행함으로써 해당  페이지를 interactive하게 만든다.

위 과정에서, 동적 콘텐츠를 얻고 그것을 HTML로 변환하고 브라우저로 전달하는 것 까지 모두 서버의 일이 된다. 그래서 이 과정이 SSR이라 불린다.

미리 완성된 HTML을 렌더링하는 작업이 서버의 메모리와 processing power에 부담이 된다. 그래서 동적 콘텐츠가 없는 정적 사이트를 로딩하는 것에 비교하면 SSR은 로딩 시간이 증가되게 된다.

>> 클라이언트 사이드 렌더링이란 무엇인가?
CSR에서는 동적 콘텐츠의 컴파일과 HTML 생성의 작업을 클라이언트 브라우저가 맡는다.
이러한 접근은 리액트, 뷰, 앵귤러 같은 자바스크립트 프레임워크와 라이브러리에 의해 작동 된다. CSR에서 일반적인 웹 페이지 렌더링은 다음 단계를 따른다:
	1. 사용자가 웹사이트에게 요청을 보낸다
	2. 서버 대신, CDN(Content Delivery Network)가 정적 HTML, CSS 그리고 supporting 파일들을 유저에ㅔㄱ 제공하기 위해 사용 될 수 있다.
	3. 브라우저가 HTML, 그 다음 JS를 다운 받는 동안, 사용자는 로딩 심볼을 보게 된다.
	4. 브라우저가 JS 파일들을 받은 후, 동적 콘텐츠를 받기 위해 API 요청을 AJAX를 통해 보내고 최종 콘텐트를 렌더링하기 위한 작업을 처리한다.
	5. 서버가 응답한 후에, 최종 콘텐트는 클라이언트 브라우저에서 DOM 프로세승을 사용해 렌더링 된다.

데이터를 가져오고 처리하는 것이 클라이언트 쪽에서 이루어 지기 때문에, 이것을 CSR이라 부른다.

>> CSR과 SSR 비교
1. 웹 페이지 로딩 시간
1-1. 첫 페이지 로딩 시간:
	SSR이 CSR보다 덜 걸림
1-2. 두번째와 그 이후의 페이지 로딩 시간:
	CSR은 필요한 파일들을 미리 다 받아뒀기 때문에 SSR보다 덜 걸린다. CSR에서는 lazy module JavaSCript가 로딩 될 필요가 없는 한 서버 쪽으로 요청을 보내지 않는다.

2. 캐싱
캐싱이 CSR/SSR 모두 로딩 시간을 향상시키지만 CSR은 한 번만 로드 되면 더 이상 서버로의 요청이 필요 없기 때문에  CSR에서 얻는 이득이 더 크다.

3. SEO 영향
검색 엔진의 크롤러는 메타 데이터를 참조하기 때문에 올바른 메타 데이터의 사용이 검색 엔진 최적화에 중요하다.
CSR에서는 동적 콘텐츠가 자바스크립트에 의해 생성되고 자바스크립트의 실행에 따라 메타데이터의 변화가 일어나는데 과거 검색 엔진은 자바스크립트 실행을 안했다. 그러나 구글이 자바스크립트 실행을 받아들였고 트렌트가 변화 중이다.

CSR에서, 메타데이터의 변화에 대한 추가적인 노력이 필요하다. 리액트에서 React Helmet같은 플러그인이나 앵귤러에서 @angular/brower 라이브러리의 메타 같은 라이브러리 모듈의 사용이 요구된다. 각 페이지마다 메타데이터의 세팅과 클라이언트 사이드에 런더링하기 위한 추가적인 노력이 필요한 것이다.

SSR에서는, 올바른 메타데이터와 함께 완전한 페이지가 컴파일 되고 최종 HTML 콘텐트가 프론트엔드로 전동 된다. 그래서 크롤러가 JavaScript의 실행 여부와 관계 없이 올바른 메타데이터를 참조할 수 있다. 

SSR이 검색엔진 최적호에 있어서는 CSR과 비교했을 때 낫다!

>> 언제 CSR/SSR을 사용할까?
1.  동적 콘텐츠 로딩:
	웹사이트가 반복되는 동적 콘텐트 로딩이 있다면, SSR이 CSR보다 나은 선택이다.

2. 웹 애플리케이션 UX vs. 웹사이트 UX
웹 애플리케이션에서 user interaction이 더 일어나기 때문에 클릭을 최대한 줄이는 게 중요하다. 그래서 CSR이 웹 애플리케이션에서는 더 낫다.
웹 사이트에서는 SSR이 더 낫다.

>> SSR과 CSR의 이점들을 다 갖는 법:
Gatsby 같이 첫 로딩 시에는 SSR을 이용하고 로딩이 완료된 후에는 다른 페이지들은 캐시에 저장한다.










